

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
// 
// Do not make changes directly to this file - edit the template instead.
// 
// The following connection settings were used to generate this file:
//     Configuration file:     "DDona.ArquiteturaTesteSiac.Infra\App.config"
//     Connection String Name: "SiacContext"
//     Connection String:      "Server=.\SQLExpress;Database=Teste;User Id=sa;password=**zapped**;;MultipleActiveResultSets=true;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Data.Entity.Infrastructure;
using System.Linq.Expressions;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace DDona.ArquiteturaTesteSiac.Infra
{
    // ************************************************************************
    // Unit of work
    public interface ISiacContext : IDisposable
    {
        DbSet<Classe> Classes { get; set; } // Classe
        DbSet<Funcionario> Funcionarios { get; set; } // Funcionario
        DbSet<ItemVenda> ItemVendas { get; set; } // ItemVenda
        DbSet<Loja> Lojas { get; set; } // Loja
        DbSet<Produto> Produtoes { get; set; } // Produto
        DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        DbSet<Venda> Vendas { get; set; } // Venda

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken);
        
        // Stored Procedures
    }

    // ************************************************************************
    // Database context
    public class SiacContext : DbContext, ISiacContext
    {
        public DbSet<Classe> Classes { get; set; } // Classe
        public DbSet<Funcionario> Funcionarios { get; set; } // Funcionario
        public DbSet<ItemVenda> ItemVendas { get; set; } // ItemVenda
        public DbSet<Loja> Lojas { get; set; } // Loja
        public DbSet<Produto> Produtoes { get; set; } // Produto
        public DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams
        public DbSet<Venda> Vendas { get; set; } // Venda
        
        static SiacContext()
        {
            System.Data.Entity.Database.SetInitializer<SiacContext>(null);
        }

        public SiacContext()
            : base("Name=SiacContext")
        {
        }

        public SiacContext(string connectionString) : base(connectionString)
        {
        }

        public SiacContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ClasseConfiguration());
            modelBuilder.Configurations.Add(new FuncionarioConfiguration());
            modelBuilder.Configurations.Add(new ItemVendaConfiguration());
            modelBuilder.Configurations.Add(new LojaConfiguration());
            modelBuilder.Configurations.Add(new ProdutoConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
            modelBuilder.Configurations.Add(new VendaConfiguration());
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ClasseConfiguration(schema));
            modelBuilder.Configurations.Add(new FuncionarioConfiguration(schema));
            modelBuilder.Configurations.Add(new ItemVendaConfiguration(schema));
            modelBuilder.Configurations.Add(new LojaConfiguration(schema));
            modelBuilder.Configurations.Add(new ProdutoConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            modelBuilder.Configurations.Add(new VendaConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake Database context
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeSiacContext : ISiacContext
    {
        public DbSet<Classe> Classes { get; set; }
        public DbSet<Funcionario> Funcionarios { get; set; }
        public DbSet<ItemVenda> ItemVendas { get; set; }
        public DbSet<Loja> Lojas { get; set; }
        public DbSet<Produto> Produtoes { get; set; }
        public DbSet<Sysdiagram> Sysdiagrams { get; set; }
        public DbSet<Venda> Vendas { get; set; }

        public FakeSiacContext()
        {
            Classes = new FakeDbSet<Classe>();
            Funcionarios = new FakeDbSet<Funcionario>();
            ItemVendas = new FakeDbSet<ItemVenda>();
            Lojas = new FakeDbSet<Loja>();
            Produtoes = new FakeDbSet<Produto>();
            Sysdiagrams = new FakeDbSet<Sysdiagram>();
            Vendas = new FakeDbSet<Venda>();
        }
        
        public int SaveChangesCount { get; private set; } 
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }
        
        public void Dispose()
        {
            Dispose(true);
        }
        
        // Stored Procedures
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable, IEnumerable<TEntity>, IDbAsyncEnumerable<TEntity> 
        where TEntity : class 
    { 
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;
 
        public FakeDbSet() 
        { 
            _data = new ObservableCollection<TEntity>(); 
            _query = _data.AsQueryable(); 
        }

        public override IEnumerable<TEntity> AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }
        
        public override TEntity Add(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Remove(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Remove(item); 
            return item; 
        } 
 
        public override TEntity Attach(TEntity item) 
        {
            if (item == null) throw new ArgumentNullException("item");
            _data.Add(item); 
            return item; 
        } 
 
        public override TEntity Create() 
        { 
            return Activator.CreateInstance<TEntity>(); 
        } 
 
        public override TDerivedEntity Create<TDerivedEntity>() 
        { 
            return Activator.CreateInstance<TDerivedEntity>(); 
        } 
 
        public override ObservableCollection<TEntity> Local 
        { 
            get { return _data; } 
        } 
 
        Type IQueryable.ElementType 
        { 
            get { return _query.ElementType; } 
        } 
 
        Expression IQueryable.Expression 
        { 
            get { return _query.Expression; } 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); } 
        } 
 
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator() 
        { 
            return _data.GetEnumerator(); 
        } 
 
        IDbAsyncEnumerator<TEntity> IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator()); 
        }
    } 
 
    public class FakeDbAsyncQueryProvider<TEntity> : IDbAsyncQueryProvider 
    { 
        private readonly IQueryProvider _inner; 
 
        public FakeDbAsyncQueryProvider(IQueryProvider inner) 
        { 
            _inner = inner; 
        } 
 
        public IQueryable CreateQuery(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TEntity>(expression); 
        } 
 
        public IQueryable<TElement> CreateQuery<TElement>(Expression expression) 
        { 
            return new FakeDbAsyncEnumerable<TElement>(expression); 
        } 
 
        public object Execute(Expression expression) 
        { 
            return _inner.Execute(expression); 
        } 
 
        public TResult Execute<TResult>(Expression expression) 
        { 
            return _inner.Execute<TResult>(expression); 
        } 
 
        public System.Threading.Tasks.Task<object> ExecuteAsync(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute(expression)); 
        } 
 
        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression)); 
        } 
    } 
 
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IDbAsyncEnumerable<T>, IQueryable<T> 
    { 
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable) 
            : base(enumerable) 
        { } 
 
        public FakeDbAsyncEnumerable(Expression expression) 
            : base(expression) 
        { } 
 
        public IDbAsyncEnumerator<T> GetAsyncEnumerator() 
        { 
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator()); 
        } 
 
        IDbAsyncEnumerator IDbAsyncEnumerable.GetAsyncEnumerator() 
        { 
            return GetAsyncEnumerator(); 
        } 
 
        IQueryProvider IQueryable.Provider 
        { 
            get { return new FakeDbAsyncQueryProvider<T>(this); } 
        } 
    } 
 
    public class FakeDbAsyncEnumerator<T> : IDbAsyncEnumerator<T> 
    { 
        private readonly IEnumerator<T> _inner; 
 
        public FakeDbAsyncEnumerator(IEnumerator<T> inner) 
        { 
            _inner = inner; 
        } 
 
        public void Dispose() 
        { 
            _inner.Dispose(); 
        } 
 
        public System.Threading.Tasks.Task<bool> MoveNextAsync(CancellationToken cancellationToken) 
        { 
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext()); 
        } 
 
        public T Current 
        { 
            get { return _inner.Current; } 
        } 
 
        object IDbAsyncEnumerator.Current 
        { 
            get { return Current; } 
        } 
    }

    // ************************************************************************
    // POCO classes

    // Classe
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Classe
    {
        public int LojaCodigo { get; set; } // LojaCodigo (Primary key)
        public int Codigo { get; set; } // Codigo (Primary key)
        public string Nome { get; set; } // Nome
        public string Descricao { get; set; } // Descricao
        public DateTime DataCriacao { get; set; } // DataCriacao
        public DateTime? DataAlteracao { get; set; } // DataAlteracao

        // Reverse navigation
        public virtual ICollection<Produto> Produtoes { get; set; } // Produto.FK_Produto_Classe

        // Foreign keys
        public virtual Loja Loja { get; set; } // FK_Classe_Loja
        
        public Classe()
        {
            Produtoes = new List<Produto>();
        }
    }

    // Funcionario
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Funcionario
    {
        public int LojaCodigo { get; set; } // LojaCodigo (Primary key)
        public int Codigo { get; set; } // Codigo (Primary key)
        public string Nome { get; set; } // Nome
        public string EstadoCivil { get; set; } // EstadoCivil

        // Reverse navigation
        public virtual ICollection<ItemVenda> ItemVendas { get; set; } // ItemVenda.FK_ItemVenda_Funcionario

        // Foreign keys
        public virtual Loja Loja { get; set; } // FK_Funcionario_Loja
        
        public Funcionario()
        {
            ItemVendas = new List<ItemVenda>();
        }
    }

    // ItemVenda
    public class ItemVenda
    {
        public int VendaLoja { get; set; } // VendaLoja (Primary key)
        public int VendaCodigo { get; set; } // VendaCodigo (Primary key)
        public int Codigo { get; set; } // Codigo (Primary key)
        public int ProdutoCodigo { get; set; } // ProdutoCodigo
        public int ProdutoLoja { get; set; } // ProdutoLoja
        public decimal Quantidade { get; set; } // Quantidade
        public decimal ValorProduto { get; set; } // ValorProduto
        public int FuncionarioLoja { get; set; } // FuncionarioLoja
        public int FuncionarioCodigo { get; set; } // FuncionarioCodigo

        // Foreign keys
        public virtual Funcionario Funcionario { get; set; } // FK_ItemVenda_Funcionario
        public virtual Produto Produto { get; set; } // FK_ItemVenda_Produto
        public virtual Venda Venda { get; set; } // FK_ItemVenda_Venda
    }

    // Loja
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Loja
    {
        public int Codigo { get; set; } // Codigo (Primary key)
        public string NomeFantasia { get; set; } // NomeFantasia
        public string RazaoSocial { get; set; } // RazaoSocial
        public DateTime? DataAbertura { get; set; } // DataAbertura
        public DateTime DataCriacao { get; set; } // DataCriacao
        public DateTime? DataAlteracao { get; set; } // DataAlteracao

        // Reverse navigation
        public virtual ICollection<Classe> Classes { get; set; } // Many to many mapping
        public virtual ICollection<Funcionario> Funcionarios { get; set; } // Many to many mapping
        public virtual ICollection<Produto> Produtoes { get; set; } // Many to many mapping
        public virtual ICollection<Venda> Vendas { get; set; } // Many to many mapping
        
        public Loja()
        {
            Classes = new List<Classe>();
            Funcionarios = new List<Funcionario>();
            Produtoes = new List<Produto>();
            Vendas = new List<Venda>();
        }
    }

    // Produto
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Produto
    {
        public int LojaCodigo { get; set; } // LojaCodigo (Primary key)
        public int Codigo { get; set; } // Codigo (Primary key)
        public string NomeProduto { get; set; } // NomeProduto
        public string Unidade { get; set; } // Unidade
        public DateTime DataCriacao { get; set; } // DataCriacao
        public DateTime? DataAlteracao { get; set; } // DataAlteracao
        public int? ClasseCodigo { get; set; } // ClasseCodigo
        public int? ClasseLoja { get; set; } // ClasseLoja

        // Reverse navigation
        public virtual ICollection<ItemVenda> ItemVendas { get; set; } // ItemVenda.FK_ItemVenda_Produto

        // Foreign keys
        public virtual Classe Classe { get; set; } // FK_Produto_Classe
        public virtual Loja Loja { get; set; } // FK_Produto_Loja
        
        public Produto()
        {
            ItemVendas = new List<ItemVenda>();
        }
    }

    // sysdiagrams
    public class Sysdiagram
    {
        public string Name { get; set; } // name
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    // Venda
    [GeneratedCodeAttribute("EF.Reverse.POCO.Generator", "2.16.1.0")]
    public class Venda
    {
        public int LojaCodigo { get; set; } // LojaCodigo (Primary key)
        public int Codigo { get; set; } // Codigo (Primary key)
        public DateTime Data { get; set; } // Data
        public decimal ValorTotal { get; set; } // ValorTotal
        public decimal? Desconto { get; set; } // Desconto
        public bool? Finalizada { get; set; } // Finalizada

        // Reverse navigation
        public virtual ICollection<ItemVenda> ItemVendas { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Loja Loja { get; set; } // FK_Venda_Loja
        
        public Venda()
        {
            ItemVendas = new List<ItemVenda>();
        }
    }


    // ************************************************************************
    // POCO Configuration

    // Classe
    public class ClasseConfiguration : EntityTypeConfiguration<Classe>
    {
        public ClasseConfiguration()
            : this("dbo")
        {
        }
 
        public ClasseConfiguration(string schema)
        {
            ToTable(schema + ".Classe");
            HasKey(x => new { x.LojaCodigo, x.Codigo });

            Property(x => x.LojaCodigo).HasColumnName("LojaCodigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Nome).HasColumnName("Nome").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Descricao).HasColumnName("Descricao").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.DataCriacao).HasColumnName("DataCriacao").IsRequired().HasColumnType("datetime");
            Property(x => x.DataAlteracao).HasColumnName("DataAlteracao").IsOptional().HasColumnType("datetime");

            // Foreign keys
            HasRequired(a => a.Loja).WithMany(b => b.Classes).HasForeignKey(c => c.LojaCodigo); // FK_Classe_Loja
        }
    }

    // Funcionario
    public class FuncionarioConfiguration : EntityTypeConfiguration<Funcionario>
    {
        public FuncionarioConfiguration()
            : this("dbo")
        {
        }
 
        public FuncionarioConfiguration(string schema)
        {
            ToTable(schema + ".Funcionario");
            HasKey(x => new { x.LojaCodigo, x.Codigo });

            Property(x => x.LojaCodigo).HasColumnName("LojaCodigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Nome).HasColumnName("Nome").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(80);
            Property(x => x.EstadoCivil).HasColumnName("EstadoCivil").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(20);

            // Foreign keys
            HasRequired(a => a.Loja).WithMany(b => b.Funcionarios).HasForeignKey(c => c.LojaCodigo); // FK_Funcionario_Loja
        }
    }

    // ItemVenda
    public class ItemVendaConfiguration : EntityTypeConfiguration<ItemVenda>
    {
        public ItemVendaConfiguration()
            : this("dbo")
        {
        }
 
        public ItemVendaConfiguration(string schema)
        {
            ToTable(schema + ".ItemVenda");
            HasKey(x => new { x.VendaCodigo, x.VendaLoja, x.Codigo });

            Property(x => x.VendaLoja).HasColumnName("VendaLoja").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.VendaCodigo).HasColumnName("VendaCodigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.ProdutoCodigo).HasColumnName("ProdutoCodigo").IsRequired().HasColumnType("int");
            Property(x => x.ProdutoLoja).HasColumnName("ProdutoLoja").IsRequired().HasColumnType("int");
            Property(x => x.Quantidade).HasColumnName("Quantidade").IsRequired().HasColumnType("decimal").HasPrecision(9,4);
            Property(x => x.ValorProduto).HasColumnName("ValorProduto").IsRequired().HasColumnType("decimal").HasPrecision(10,4);
            Property(x => x.FuncionarioLoja).HasColumnName("FuncionarioLoja").IsRequired().HasColumnType("int");
            Property(x => x.FuncionarioCodigo).HasColumnName("FuncionarioCodigo").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Funcionario).WithMany(b => b.ItemVendas).HasForeignKey(c => new { c.FuncionarioLoja, c.FuncionarioCodigo }); // FK_ItemVenda_Funcionario
            HasRequired(a => a.Produto).WithMany(b => b.ItemVendas).HasForeignKey(c => new { c.ProdutoLoja, c.ProdutoCodigo }); // FK_ItemVenda_Produto
            HasRequired(a => a.Venda).WithMany(b => b.ItemVendas).HasForeignKey(c => new { c.VendaLoja, c.VendaCodigo }); // FK_ItemVenda_Venda
        }
    }

    // Loja
    public class LojaConfiguration : EntityTypeConfiguration<Loja>
    {
        public LojaConfiguration()
            : this("dbo")
        {
        }
 
        public LojaConfiguration(string schema)
        {
            ToTable(schema + ".Loja");
            HasKey(x => x.Codigo);

            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NomeFantasia).HasColumnName("NomeFantasia").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(70);
            Property(x => x.RazaoSocial).HasColumnName("RazaoSocial").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(100);
            Property(x => x.DataAbertura).HasColumnName("DataAbertura").IsOptional().HasColumnType("datetime");
            Property(x => x.DataCriacao).HasColumnName("DataCriacao").IsRequired().HasColumnType("datetime");
            Property(x => x.DataAlteracao).HasColumnName("DataAlteracao").IsOptional().HasColumnType("datetime");
        }
    }

    // Produto
    public class ProdutoConfiguration : EntityTypeConfiguration<Produto>
    {
        public ProdutoConfiguration()
            : this("dbo")
        {
        }
 
        public ProdutoConfiguration(string schema)
        {
            ToTable(schema + ".Produto");
            HasKey(x => new { x.LojaCodigo, x.Codigo });

            Property(x => x.LojaCodigo).HasColumnName("LojaCodigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.NomeProduto).HasColumnName("NomeProduto").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(90);
            Property(x => x.Unidade).HasColumnName("Unidade").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(2);
            Property(x => x.DataCriacao).HasColumnName("DataCriacao").IsRequired().HasColumnType("datetime");
            Property(x => x.DataAlteracao).HasColumnName("DataAlteracao").IsOptional().HasColumnType("datetime");
            Property(x => x.ClasseCodigo).HasColumnName("ClasseCodigo").IsOptional().HasColumnType("int");
            Property(x => x.ClasseLoja).HasColumnName("ClasseLoja").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Classe).WithMany(b => b.Produtoes).HasForeignKey(c => new { c.ClasseLoja, c.ClasseCodigo }); // FK_Produto_Classe
            HasRequired(a => a.Loja).WithMany(b => b.Produtoes).HasForeignKey(c => c.LojaCodigo); // FK_Produto_Loja
        }
    }

    // sysdiagrams
    public class SysdiagramConfiguration : EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }
 
        public SysdiagramConfiguration(string schema)
        {
            ToTable(schema + ".sysdiagrams");
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName("name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName("principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName("diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName("version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName("definition").IsOptional().HasColumnType("varbinary");
        }
    }

    // Venda
    public class VendaConfiguration : EntityTypeConfiguration<Venda>
    {
        public VendaConfiguration()
            : this("dbo")
        {
        }
 
        public VendaConfiguration(string schema)
        {
            ToTable(schema + ".Venda");
            HasKey(x => new { x.LojaCodigo, x.Codigo });

            Property(x => x.LojaCodigo).HasColumnName("LojaCodigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
            Property(x => x.Codigo).HasColumnName("Codigo").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity);
            Property(x => x.Data).HasColumnName("Data").IsRequired().HasColumnType("datetime");
            Property(x => x.ValorTotal).HasColumnName("ValorTotal").IsRequired().HasColumnType("decimal").HasPrecision(10,4);
            Property(x => x.Desconto).HasColumnName("Desconto").IsOptional().HasColumnType("decimal").HasPrecision(10,4);
            Property(x => x.Finalizada).HasColumnName("Finalizada").IsOptional().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Loja).WithMany(b => b.Vendas).HasForeignKey(c => c.LojaCodigo); // FK_Venda_Loja
        }
    }


    // ************************************************************************
    // Stored procedure return models

}
// </auto-generated>

